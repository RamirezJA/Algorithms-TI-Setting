Question 1:
I decided to use a dictionary so that there would only be a few dictionary lookups, comparisons, addition and subtractions. The idea is to create a dictionary that is keyed by the letters of the first dictionary with frequency counts of the letters for the corresponding values. Because there are no nested loops and each pass through the main loop goes through the dictionary due to this the algorithm is linear O(n).

Question2:

The program uses the dictionary data structure because I felt it would be the most efficient in storing the string given and I could also easily check to see if the string itself was the longest palindrome by using "[::-1]:" to check it in reverse. The efficiency of the solution is O(n) because the program has to scan the conditions until the proper one is met. The worst case scenario would be that it has to run all three statements max(time(sequence 1), time(sequence 2), time(sequence 3)) and it would be O(n).
