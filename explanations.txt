Question 1:
This program uses a dictionary as the data structure so that there would only be a few dictionary lookups, comparisons, addition and subtractions. The idea is to create a dictionary that is keyed by the letters of the first dictionary with frequency counts of the letters for the corresponding values. Because there are no nested loops and each pass through the main loop goes through the dictionary due to this the algorithm is linear O(n).

Question2:

The program uses the dictionary data structure because I felt it would be the most efficient in storing the string given and I could also easily check to see if the string itself was the longest palindrome by using "[::-1]:" to check it in reverse. The efficiency of the solution is O(n) because the program has to scan the conditions until the proper one is met. The worst case scenario would be that it has to run all three statements max(time(sequence 1), time(sequence 2), time(sequence 3)) and it would be O(n).

Question3: 

This problem can be solved using two famous algorithms prims or Kruskal's I decided to go with Kruskal's which is a greedy algorithm. Kruskal's first sorts the graph edges based on their weights, then it adds edges of the minimum spanning tree from the smallest weight to the largest weight. It only adds edges which do not form a cycle. For the edges, I decided to use a list as the data structure. For the MST I decided to use the set() function when adding the edges.  In regards to efficiency, it is O(ELogV) because we are taking in a random order and finding and fixing the order of the edges based on weight and their vertices.

Question4: 

This problem uses the Binary Search Tree data structure in order to find the Lowest Common Ancestor. T is the tree and the lowest common ancestor between two nodes n1 and n2 is defined as the lowest node in T that has both n1 and n2 as descendants. A node is allowed to be a descendant of itself. The tree is traversed recursively from the root. The idea being that traversing and if the value of the node is greater than both n1 and n2 the LCA lies to the left side and if its smaller than n1 and n2 LCA is on the right side. Otherwise, the root is LCA as long as both n1 and n2 are in the tree. In regards to efficiency, the formation of the tree is O(n^2) n being the vertices. The time complexity for the height of the tree is 0(h).

Question5:

This question uses the singly linked list data structure. The problem asked that a singly linked list be used in order to find the element in a singly linked list that's m elements from the end. In order to solve this problem, two pointers are maintained a reference pointer and a main pointer.  Reference and main pointers initialize to head. The reference pointer moves first to m nodes from the head. Then both pointers move one by one until reference pointer gets to end. The main pointer will point to mth node from the end. The time complexity is O(n) where n is the length of the linked list.
